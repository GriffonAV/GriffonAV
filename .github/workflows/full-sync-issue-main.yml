name: Full Issue Sync

on:
    push:
        branches:
            - main
    workflow_dispatch: # allow manual run too

jobs:
    full-sync:
        runs-on: ubuntu-latest
        steps:
            - name: Sync all issues from Repo A -> Repo B
              uses: actions/github-script@v7
              with:
                  github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
                  script: |
                      const sourceOwner = context.repo.owner;
                      const sourceRepo = context.repo.repo;
                      const targetOwner = "EpitechPromo2027";
                      const targetRepo = "G-EIP-600-REN-6-1-eip-alexis.boitel";

                      // Fetch all issues (open & closed)
                      let page = 1;
                      let issues = [];
                      while (true) {
                        const res = await github.rest.issues.listForRepo({
                          owner: sourceOwner,
                          repo: sourceRepo,
                          state: "all",
                          per_page: 100,
                          page: page
                        });
                        if (res.data.length === 0) break;
                        issues = issues.concat(res.data);
                        page++;
                      }

                      for (const issue of issues) {
                        // Search in Repo B for a synced issue
                        const search = await github.rest.search.issuesAndPullRequests({
                          q: `in:body "${sourceOwner}/${sourceRepo}#${issue.number}" repo:${targetOwner}/${targetRepo}`
                        });

                        if (search.data.total_count === 0) {
                          // Create new
                          await github.rest.issues.create({
                            owner: targetOwner,
                            repo: targetRepo,
                            title: issue.title,
                            body: `Synced from ${sourceOwner}/${sourceRepo}#${issue.number}\n\n${issue.body || ""}`,
                            labels: issue.labels.map(l => l.name),
                            state: issue.state
                          });
                        } else {
                          // Update existing
                          const targetIssue = search.data.items[0];
                          await github.rest.issues.update({
                            owner: targetOwner,
                            repo: targetRepo,
                            issue_number: targetIssue.number,
                            title: issue.title,
                            body: `Synced from ${sourceOwner}/${sourceRepo}#${issue.number}\n\n${issue.body || ""}`,
                            state: issue.state
                          });
                        }
                      }
                      console.log(`Synced ${issues.length} issues.`);

            - name: Add issues to Project and set fields
              uses: actions/github-script@v7
              with:
                  github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
                  script: |
                      const { data: project } = await github.graphql(`
                      query {
                          node(id: "PVT_xxxxxx") {
                          ... on ProjectV2 {
                              id
                              fields(first: 20) {
                              nodes {
                                  id
                                  name
                                  dataType
                              }
                              }
                          }
                          }
                      }
                      `);

                      const IMPORTANCE_FIELD_ID = project.node.fields.nodes.find(f => f.name === "Importance").id;
                      const COMPLEXITY_FIELD_ID = project.node.fields.nodes.find(f => f.name === "Complexity").id;

                      for (const issue of issues) {
                      // Add issue to project
                      const addRes = await github.graphql(
                          `mutation($proj:ID!, $content:ID!) {
                          addProjectV2ItemById(input: { projectId: $proj, contentId: $content }) {
                              item { id }
                          }
                          }`,
                          { proj: project.node.id, content: issue.node_id }
                      );

                      const itemId = addRes.addProjectV2ItemById.item.id;

                      // Example: map labels to fields
                      for (const label of issue.labels) {
                          if (label.name.startsWith("importance:")) {
                          const value = label.name.split(":")[1];
                          await github.graphql(
                              `mutation($proj:ID!, $item:ID!, $field:ID!, $val:String!) {
                              updateProjectV2ItemFieldValue(input: {
                                  projectId: $proj,
                                  itemId: $item,
                                  fieldId: $field,
                                  value: { singleSelectOptionId: $val }
                              }) { clientMutationId }
                              }`,
                              { proj: project.node.id, item: itemId, field: IMPORTANCE_FIELD_ID, val: value }
                          );
                          }
                      }
                      }
